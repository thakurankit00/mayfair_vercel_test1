name: Deploy to Vercel (Prebuilt)

# This workflow builds in GitHub Actions then deploys to Vercel
# More control, deterministic builds, better for CI/CD

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - production
          - preview
        default: 'preview'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # Prevent concurrent deployments to the same branch
    concurrency:
      group: vercel-deploy-prebuilt-${{ github.event.inputs.branch }}
      cancel-in-progress: true
    
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    
    steps:
      - name: 📥 Checkout target branch code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0
          path: target-branch

      - name: 📥 Checkout workflow branch (for Vercel files)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          path: workflow-branch

      - name: 🔧 Inject Vercel support files
        run: |
          echo "📦 Injecting Vercel support files into target branch..."

          # Copy vercel.json if it doesn't exist in target branch
          if [ ! -f "target-branch/vercel.json" ]; then
            echo "  → Copying vercel.json"
            cp workflow-branch/vercel.json target-branch/vercel.json
          else
            echo "  ✓ vercel.json already exists in target branch"
          fi

          # Copy backend/index.js if it doesn't exist in target branch
          if [ ! -f "target-branch/backend/index.js" ]; then
            echo "  → Copying backend/index.js"
            cp workflow-branch/backend/index.js target-branch/backend/index.js
          else
            echo "  ✓ backend/index.js already exists in target branch"
          fi

          # Update backend/package.json to add postinstall if missing
          if [ -f "target-branch/backend/package.json" ]; then
            if ! grep -q '"postinstall"' target-branch/backend/package.json; then
              echo "  → Adding postinstall script to backend/package.json"
              # Use jq to add postinstall script
              sudo apt-get install -y jq
              jq '.scripts.postinstall = "cd ../frontend && npm install && npm run build" | .scripts["vercel-build"] = "cd ../frontend && npm install && npm run build"' \
                target-branch/backend/package.json > temp.json && mv temp.json target-branch/backend/package.json
            else
              echo "  ✓ postinstall script already exists in backend/package.json"
            fi
          fi

          echo "✅ Vercel support files ready!"

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📦 Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            target-branch/backend/node_modules
            target-branch/frontend/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('target-branch/**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: 📦 Install Backend Dependencies
        working-directory: ./target-branch/backend
        run: npm ci --prefer-offline --no-audit

      - name: 📦 Install Frontend Dependencies
        working-directory: ./target-branch/frontend
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Lint Backend Code
        working-directory: ./target-branch/backend
        run: npm run lint || echo "⚠️ Linting warnings found, continuing..."
        continue-on-error: true

      - name: 🔍 Lint Frontend Code
        working-directory: ./target-branch/frontend
        run: npm run lint || echo "⚠️ Linting warnings found, continuing..."
        continue-on-error: true
      
      - name: 🏗️ Build Frontend
        working-directory: ./target-branch/frontend
        run: |
          echo "Building frontend for ${{ github.event.inputs.environment }}..."
          npm run build
        env:
          CI: false
          DISABLE_ESLINT_PLUGIN: true
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
          REACT_APP_SOCKET_URL: ${{ secrets.REACT_APP_SOCKET_URL }}

      - name: 📦 Install Vercel CLI
        run: npm install -g vercel@latest

      - name: 🔗 Link Vercel Project
        working-directory: ./target-branch
        run: |
          vercel link --yes \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --scope=${{ secrets.VERCEL_ORG_ID }} \
            --project=${{ secrets.VERCEL_PROJECT_ID }}

      - name: 🏗️ Pull Vercel Environment Information
        working-directory: ./target-branch
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          fi

      - name: 🏗️ Build Project Artifacts for Vercel
        working-directory: ./target-branch
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel build --token=${{ secrets.VERCEL_TOKEN }}
          fi

      - name: 🚀 Deploy Prebuilt to Vercel
        id: deploy
        working-directory: ./target-branch
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "🌟 Deploying prebuilt to PRODUCTION..."
            DEPLOY_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          else
            echo "🔍 Deploying prebuilt to PREVIEW..."
            DEPLOY_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          fi

          echo "deployment_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "✅ Deployment URL: $DEPLOY_URL"
      
      - name: 📝 Create Deployment Summary
        run: |
          echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.event.inputs.branch }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** \`${{ github.event.inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment URL:** ${{ steps.deploy.outputs.deployment_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** Prebuilt (GitHub builds)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Version:** 18" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type:** Deterministic (CI)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache Used:** Yes" >> $GITHUB_STEP_SUMMARY
      
      - name: 💬 Comment on Commit (if available)
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment_url }}';
            const environment = '${{ github.event.inputs.environment }}';
            const branch = '${{ github.event.inputs.branch }}';
            
            const emoji = environment === 'production' ? '🌟' : '🔍';
            const message = `${emoji} **Vercel Deployment Complete**\n\n` +
              `**Environment:** ${environment}\n` +
              `**Branch:** ${branch}\n` +
              `**URL:** ${deploymentUrl}\n\n` +
              `Deployed via Prebuilt workflow (GitHub builds)`;
            
            // Try to comment on PR if available
            if (context.payload.pull_request) {
              github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }
      
      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "Cleaning up temporary files..."
          rm -rf .vercel

